A = [1,6.18790803292648,1,1,2,10;2,-6.18790803292648,1,4,0,11;3,18.9305084835327,2,2,4,113;4,-4.88951266031734,2,21,5,9;5,-9.09008271975275,2,22,0,56;6,10.1665226108925,3,3,7,39;7,-5.04701746352268,3,10,8,25;8,-5.11950514736986,3,18,9,12;9,-2.00583546702482,3,21,0,28;10,-6.18790803292648,4,1,11,0;11,20.1675034129966,4,4,12,90;12,-4.88951266031734,4,18,13,27;13,-9.09008271975275,4,20,0,55;14,8.78360329779779,5,5,15,29;15,3.69906131745525,5,8,16,30;16,-4.40294374946052,5,12,17,31;17,-1.88088475370040,5,14,18,32;18,-4.38065954833727,5,19,0,23;19,5.65025606875367,6,6,20,34;20,3.90817430644132,6,9,21,35;21,-2.25197462617221,6,16,22,36;22,-2.48902458682192,6,17,23,37;23,-3.39828144258146,6,19,0,33;24,35.0165215875237,7,7,25,40;25,1.77769095211365,7,10,26,41;26,-9.70612291587772,7,11,27,42;27,6.84098066149567,7,18,28,43;28,-21.5785539816916,7,21,0,44;29,-3.97276531630007,8,5,30,51;30,8.21043288960413,8,8,31,52;31,1.88088475370040,8,12,32,53;32,-4.40294374946052,8,14,33,54;33,2.09188056259967,8,19,0,38;34,-4.12180974810446,9,6,35,75;35,5.20562111364955,9,9,36,76;36,2.48902458682192,9,16,37,59;37,-2.25197462617221,9,17,38,60;38,1.63278516128254,9,19,0,49;39,-5.04701746352268,10,3,40,89;40,-1.77769095211365,10,7,41,45;41,32.7276435866634,10,10,42,46;42,-5.42765413087835,10,11,43,47;43,-5.34605105053633,10,18,44,48;44,-1.76190464239262,10,21,0,50;45,9.42991265124281,11,7,46,91;46,-5.42765413087835,11,10,47,92;47,36.0507573245660,11,11,48,93;48,-21.5785539816916,11,18,49,94;49,-4.55546650872112,11,19,50,81;50,-6.84098066149567,11,21,0,96;51,-4.40294374946052,12,5,52,63;52,-1.88088475370040,12,8,53,64;53,14.7683378765214,12,12,54,65;54,5.78293430614783,12,14,55,66;55,-10.3653941270609,12,20,56,61;56,-3.90204955244743,12,22,0,62;57,5.34401393203596,13,13,58,69;58,2.56099964482626,13,15,59,70;59,-2.31496347510535,13,16,60,71;60,-1.13699415780633,13,17,61,72;61,-3.02905045693060,13,20,62,67;62,-1.42400548701993,13,22,0,68;63,1.88088475370040,14,5,64,97;64,-4.40294374946052,14,8,65,99;65,-5.78293430614783,14,12,66,106;66,14.7683378765214,14,14,67,108;67,3.90204955244743,14,20,68,73;68,-10.3653941270609,14,22,0,74;69,-2.56099964482626,15,13,70,77;70,5.34401393203596,15,15,71,78;71,1.13699415780633,15,16,72,79;72,-2.31496347510535,15,17,73,80;73,1.42400548701993,15,20,74,95;74,-3.02905045693060,15,22,0,112;75,-2.25197462617221,16,6,76,82;76,-2.48902458682192,16,9,77,83;77,-2.31496347510535,16,13,78,84;78,-1.13699415780633,16,15,79,85;79,11.0968864308442,16,16,80,86;80,6.50802123019757,16,17,81,87;81,-6.52994832956663,16,19,0,88;82,2.48902458682192,17,6,83,98;83,-2.25197462617221,17,9,84,100;84,1.13699415780633,17,13,85,107;85,-2.31496347510535,17,15,86,109;86,-6.94187106673489,17,16,87,102;87,10.2425006680972,17,17,88,103;88,3.31585232210665,17,19,0,104;89,-5.11950514736986,18,3,90,114;90,-4.88951266031734,18,4,91,105;91,-6.84098066149567,18,7,92,115;92,-5.34605105053633,18,10,93,116;93,-21.5785539816916,18,11,94,101;94,38.7891223977310,18,18,95,110;95,-1.85549955781590,18,20,96,111;96,10.4172582731592,18,21,0,119;97,-4.38065954833727,19,5,98,0;98,-3.39828144258146,19,6,99,0;99,-2.09188056259967,19,8,100,0;100,-1.63278516128254,19,9,101,0;101,-4.55546650872112,19,11,102,117;102,-6.52994832956663,19,16,103,0;103,-3.31585232210665,19,17,104,0;104,18.8643558292065,19,19,0,0;105,-9.09008271975275,20,4,106,0;106,-10.3653941270609,20,12,107,122;107,-3.02905045693060,20,13,108,123;108,-3.90204955244743,20,14,109,124;109,-1.42400548701993,20,15,110,125;110,-1.85549955781590,20,18,111,118;111,24.3400268615602,20,20,112,126;112,5.32605503946736,20,22,0,120;113,-4.88951266031734,21,2,114,121;114,2.00583546702482,21,3,115,0;115,-21.5785539816916,21,7,116,0;116,1.76190464239262,21,10,117,0;117,6.84098066149567,21,11,118,0;118,-10.6087207709131,21,18,119,0;119,38.5192200174846,21,21,120,127;120,-1.85549955781590,21,22,0,128;121,-9.09008271975275,22,2,122,0;122,3.90204955244743,22,12,123,0;123,1.42400548701993,22,13,124,0;124,-10.3653941270609,22,14,125,0;125,-3.02905045693060,22,15,126,0;126,-5.32605503946736,22,20,127,0;127,-1.85549955781590,22,21,128,0;128,23.8449858889756,22,22,0,0]; 
Jacob_sparse = A;

% calculate the number of rows/cols in the Jacobian
N_Jacobian = max(Jacob_sparse(:,3));

[L_next,L_first]=sparse_table.Blank_array();
[U_next,U_first]=sparse_table.Blank_array();

% for i = 1:N_Jacobian
%     [L_next, L_first] = 
% end

for j=1:N_Jacobian
    for k=j:N_Jacobian
        Product=0;
        for m=1:N_Jacobian
            Product=Product+sparse_table.retrieve(L_next,k,m)*sparse_table.retrieve(U_next,m,j);
        end
        [L_next,L_first]=sparse_table.store(L_next,L_first,sparse_table.retrieve(A,k,j)-Product,k,j);
    end
    if j == N_Jacobian
        % for U the final value is 1 so no need to calculate
        break
    end
    for k=j+1:N_Jacobian
        Product=0;
        for m=1:j-1
            Product=Product+sparse_table.retrieve(L_next,j,m)*sparse_table.retrieve(U_next,m,k);
        end
        [U_next,U_first]=sparse_table.store(U_next,U_first,(sparse_table.retrieve(A,j,k)-Product)/sparse_table.retrieve(L_next,j,j),j,k);
    end
end
for i=1:N_Jacobian
    % setting the diagonals of upper traingular to 1
    [U_next,U_first]=sparse_table.store(U_next,U_first,1,i,i);
end